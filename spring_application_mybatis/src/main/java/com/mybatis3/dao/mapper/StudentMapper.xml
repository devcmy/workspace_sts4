<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis3.dao.mapper.StudentMapper">
	<!-- #################### ResultMap 정의############################ -->
	<resultMap id="studentWithAddressResultMap" type="com.mybatis3.domain.Student" autoMapping="true">
		<!-- <result column="STUD_ID" property="studId" /> column 과 property 를 맵핑
			<result column="NAME" property="name" /> column 과 property 를 맵핑
			<result column="EMAIL" property="email" /> column 과 property 를 맵핑
			<result column="DOB" property="dobc" /> column 과 property 를 맵핑 -->
		<association property="address" javaType="com.mybatis3.domain.Address" autoMapping="true">
		
		<!-- <result column="ADDR_ID" property="addrId"/>
			<result column="STREET" property="street"/>
			<result column="CIRY" property="city"/>
			<result column="STATE" property="state"/>
			<result column="ZIP" property="zip"/>
			<result column="COUNTRY" property="country"/> 
			-->
			
		</association>
 	</resultMap>
	<!-- 결과의 정의를 mapping하는 map이다 -->
	
	
<!--
	/**************************************************
 	* 				SELECT
 	**************************************************/
	/*
	 * A.select sql의결과타입이 DTO,VO,Domain객체인경우 resultType : DTO,VO,Domain
	 */ -->
	<select id="findStudentById"
			parameterType="int"
			resultType="com.mybatis3.domain.Student">
		select * from students where stud_id = #{studId}
	</select>
	<select id="findAllStudents" resultType="com.mybatis3.domain.Student">
		select stud_id, name, email,dob from students
	</select>
	
	<!-- /*
	 * B. select sql의결과타입이 Wrapper,String 객체인경우 resultType : Wrapper, String
	 */ -->
	<select id="findStudentNameById" parameterType="java.lang.Integer" resultType="java.lang.String">
		select name from students where stud_id=#{studId}
	</select>

	<select id="findStudentNameList" resultType="java.lang.String">
		select name from students
	</select>
	<!-- 
	/**************************************************
 	* SELECT[students + address JOIN] (1:1)
 	**************************************************/ 
 	/*
	 * select sql의결과타입이 DTO,VO,Domain객체인경우 
	 	resultMap : (기존의 hashmap이 아니라, mapping의 map임)
	 */
 	-->
	<select id="findStudentByIdWithAddress" 
			parameterType="java.lang.Integer"
			resultMap="studentWithAddressResultMap">
	select stud_id, name, email, dob, a.addr_id, street, city, state, zip, country
	FROM students s 	
	left outer join addresses a  
	on s.addr_id=a.addr_id where stud_id=#{studId} 
	</select>
	
	
	
<!-- /***********************************
	 *             INSERT
	 ***********************************/ 
	 parameterType : DTO,VO,Domain // (insert,update,delete는 resultType 기술하지 않음.(어차피 결과타입은 기승전 integer))
	 -->
	 <insert id="insertStudent" parameterType="com.mybatis3.domain.Student" >
	 	insert into students(stud_id,name,email,dob) 
	 	values (#{studId},#{name},#{email},#{dob})  <!-- property가 #{} 안에 기술 -->
	 </insert>
	 
	 <insert id="insertStudentBySequence1" parameterType="com.mybatis3.domain.Student"> <!-- PK사용(얻을수x) x -->
	 
	 	insert into students(stud_id,name,email,dob) 
	 	values (STUDENTS_STUD_ID_SEQ.nextval,#{name},#{email},#{dob})
	 	
	 </insert>
	 
<!-- <insert id="insertStudentBySequence2" parameterType="com.mybatis3.domain.Student"> --> <!-- PK사용(얻을수있다) o -->
<!-- <selectKey order="BEFORE" resultType="int" keyProperty="studId"> --> <!-- key값 얻어서 stud id보관 -->
<!-- 	 		select students_stud_id_seq.nextval from dual  --> <!--  가상테이블 dual 이용 -->
<!-- 	 	</selectKey>
	 	insert into students(stud_id,name,email,dob) 
	 	values (#{studId},#{name},#{email},#{dob})
	 </insert>  xml파일말고, studentmapper에 직접 기술함-->	 
	 
<!-- /***********************************
	 *             UPDATE
	 **************************************/  
	 parameterType : DTO,VO,Domain // (insert,update,delete는 resultType 기술하지 않음.(어차피 결과타입은 기승전 integer))
	 -->
	 
	 <update id="updateStudentById" parameterType="com.mybatis3.domain.Student"> 
		update students 
		set name=#{name}, email=#{email}, dob=#{dob} <!-- 들어오는 값은 property값 기준 -->
		where stud_id=#{studId}	 
	 
	 </update>
	 
<!-- /***********************************
	 *             DELETE
	 **************************************/  
	 parameterType : int, java.lang.String
	 -->
	 
	 <delete id="deleteStudentById" parameterType="int">
	 	delete from students where stud_id=#{studId}
	 </delete>
	 
	 <delete id="deleteStudentByName" parameterType="String">
	 	delete from students where name=#{name}
	 </delete>
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
</mapper>